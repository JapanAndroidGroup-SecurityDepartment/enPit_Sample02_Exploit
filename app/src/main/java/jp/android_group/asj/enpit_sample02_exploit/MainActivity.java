package jp.android_group.asj.enpit_sample02_exploit;

import android.Manifest;
import android.app.Activity;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.Environment;
import android.widget.TextView;
import android.widget.Toast;

import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

public class MainActivity extends Activity {
    private static final int MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STRAGE = 1;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        startPermissionCheck();
    }

    void readPassword() {

        String email = "";
        String password = "";
        String message;

        //ファイル入力
        byte[] buff = new byte[1024 * 4];
        ByteArrayOutputStream out = new ByteArrayOutputStream();

        //enPit_Sample02_Exploitホルダではなく、enPit_Sanple02フォルダを選択する
        File strage_root = Environment.getExternalStorageDirectory(); //strage/emulated0
        File file = new File(strage_root, "Android/data/jp.android_group.asj.enpit_sample02/files/password.txt");

        try {
            FileInputStream is = new FileInputStream(file);
            BufferedInputStream bis = new BufferedInputStream(is);

            int n = bis.read(buff);
            while (n != -1) {
                out.write(buff, 0, n);
                n = bis.read(buff);
            }
            is.close();

        } catch (FileNotFoundException e) {
            Toast.makeText(this, "ファイルが見つかりませんでした", Toast.LENGTH_LONG).show();
            return;
        } catch (IOException e) {
            Toast.makeText(this, "ファイル読み込みに失敗しました", Toast.LENGTH_LONG).show();
            return;
        }

        //復号化
        byte[] binary = out.toByteArray();

        Des des = new Des();
        des.init();
        byte[] s = des.decrypt(binary);
        if (s == null) return;

        //文字分割
        String text = new String(s);

        int x1 = text.indexOf("HIMITU_PASSWORD=");
        email = text.substring("HIIMITU_LOGINID=".length(), x1);
        password = text.substring("HIMITU_PASSWORD=".length() + x1);

        //Viewへ書き込み
        TextView messageTextView = findViewById(R.id.messageTextView);
        TextView emailTextView = findViewById(R.id.emailTextView);
        TextView passwordTextView = findViewById(R.id.passwordTextView);

        message = file.getAbsolutePath();
        messageTextView.setText("次のファイルから読み込みました\n" + message);
        emailTextView.setText(email);
        passwordTextView.setText(password);

    }

    void startPermissionCheck() {
        if (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)
                != PackageManager.PERMISSION_GRANTED) {
            // Permission is not granted
            // Should we show an explanation?
            if (shouldShowRequestPermissionRationale(
                    Manifest.permission.WRITE_EXTERNAL_STORAGE)) {
                // Show an explanation to the user *asynchronously* -- don't block
                // this thread waiting for the user's response! After the user
                // sees the explanation, try again to request the permission.
                Toast.makeText(this, "パミッションがOFFになっているため実行できません", Toast.LENGTH_LONG).show();
            } else {
                // No explanation needed; request the permission
                requestPermissions(
                        new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},
                        MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STRAGE);

                // MY_PERMISSIONS_REQUEST_READ_CONTACTS is an
                // app-defined int constant. The callback method gets the
                // result of the request.
            }
        } else {
            // Permission has already been granted
            readPassword();
        }
    }


    @Override
    public void onRequestPermissionsResult(int requestCode,
                                           String permissions[], int[] grantResults) {
        switch (requestCode) {
            case MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STRAGE: {
                // If request is cancelled, the result arrays are empty.
                if (grantResults.length > 0
                        && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    // permission was granted, yay! Do the
                    // contacts-related task you need to do.
                    readPassword();
                } else {
                    // permission denied, boo! Disable the
                    // functionality that depends on this permission.
                }

            }
            // other 'case' lines to check for other
            // permissions this app might request.
        }
    }

}
